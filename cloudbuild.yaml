steps:
  # Step 1: Compare current trigger start time with watched triggers
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        echo "‚è≥ Checking if this trigger started before other watched triggers..."

        WATCHED_TRIGGERS=("trigger-2" "trigger-3")
        CURRENT_TRIGGER="$${_TRIGGER_NAME:-unknown-trigger}"
        echo "‚ÑπÔ∏è Current Trigger: $$CURRENT_TRIGGER"

        # ‚úÖ Fetch current trigger's start time
        CURRENT_BUILD_ID=$$(gcloud builds list --region=asia-south1 \
          --filter="substitutions.TRIGGER_NAME=$$CURRENT_TRIGGER" \
          --sort-by="~createTime" --limit=1 \
          --format="value(id)")
        
        if [[ -z "$$CURRENT_BUILD_ID" ]]; then
          echo "‚ö†Ô∏è Could not find current build ID. Proceeding with normal wait logic..."
          SKIP_WAIT="false"
        else
          CURRENT_START_TIME=$$(gcloud builds describe $$CURRENT_BUILD_ID --region=asia-south1 \
            --format="value(createTime)")
          echo "‚è∞ Current build $$CURRENT_BUILD_ID started at: $$CURRENT_START_TIME"

          SKIP_WAIT="true" # Assume we skip unless we find older builds
          for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
            if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
              continue
            fi

            LATEST_BUILD=$$(gcloud builds list --region=asia-south1 \
              --filter="substitutions.TRIGGER_NAME=$$TRIGGER" \
              --sort-by="~createTime" --limit=1 \
              --format="value(id,createTime)")
            
            if [[ -n "$$LATEST_BUILD" ]]; then
              BUILD_ID=$$(echo "$$LATEST_BUILD" | awk '{print $$1}')
              START_TIME=$$(echo "$$LATEST_BUILD" | awk '{print $$2}')
              echo "üîé $$TRIGGER latest build $$BUILD_ID started at: $$START_TIME"

              # Compare times: if any watched trigger started BEFORE current trigger ‚Üí must wait
              if [[ "$$START_TIME" < "$$CURRENT_START_TIME" ]]; then
                echo "‚è≥ $$TRIGGER started earlier than current build ‚Üí waiting required."
                SKIP_WAIT="false"
              fi
            fi
          done
        fi

        if [[ "$$SKIP_WAIT" == "true" ]]; then
          echo "‚úÖ Current trigger started earliest ‚Üí skipping wait logic and continuing pipeline."
          exit 0
        fi

        echo "‚ö†Ô∏è Current trigger not earliest ‚Üí executing wait logic."

        # ---------- WAIT LOGIC STARTS HERE ----------
        TRIGGER_PATTERN="$$(IFS=\|; echo "$${WATCHED_TRIGGERS[*]}")"

        wait_for_no_running_builds() {
          while true; do
            echo "üîç Checking ongoing builds..."
            ALL_BUILDS=$$(gcloud builds list --ongoing --region=asia-south1 \
              --format="value(id,createTime,status,substitutions.TRIGGER_NAME)")
            RUNNING_BUILDS=$$(echo "$$ALL_BUILDS" | grep -iE "$$TRIGGER_PATTERN" | grep -v "$$CURRENT_TRIGGER" || true)

            if [[ -z "$$RUNNING_BUILDS" ]]; then
              echo "‚úÖ No watched triggers running right now. Proceeding..."
              break
            fi

            echo "üîÑ Found running builds (excluding current):"
            echo "$$RUNNING_BUILDS"
            echo "‚è± Waiting 20 seconds before re-checking..."
            sleep 20
          done
        }

        wait_for_no_running_builds

        for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
          if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
            continue
          fi

          LATEST_BUILD=$$(gcloud builds list --region=asia-south1 \
            --filter="substitutions.TRIGGER_NAME=$$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,status,createTime)")

          if [[ -z "$$LATEST_BUILD" ]]; then
            echo "‚ÑπÔ∏è No previous build for $$TRIGGER. Skipping wait."
            continue
          fi

          BUILD_ID=$$(echo "$$LATEST_BUILD" | awk '{print $$1}')
          STATUS=$$(echo "$$LATEST_BUILD" | awk '{print $$2}')
          BUILDTIME=$$(echo "$$LATEST_BUILD" | awk '{print $$3}')

          echo "‚û°Ô∏è Latest build for $$TRIGGER: $$BUILD_ID ($$STATUS at $$BUILDTIME)"

          if [[ "$$STATUS" == "WORKING" || "$$STATUS" == "QUEUED" ]]; then
            echo "‚è≥ $$TRIGGER build still running. Waiting until it finishes..."
            while true; do
              CURRENT_STATUS=$$(gcloud builds describe $$BUILD_ID --region=asia-south1 --format="value(status)")
              echo "üîÑ $$TRIGGER build $$BUILD_ID status: $$CURRENT_STATUS"
              if [[ "$$CURRENT_STATUS" == "SUCCESS" || "$$CURRENT_STATUS" == "FAILURE" || "$$CURRENT_STATUS" == "CANCELLED" ]]; then
                STATUS=$$CURRENT_STATUS
                break
              fi
              echo "‚è± Sleeping 15 seconds before checking again..."
              sleep 15
            done
          fi

          if [[ "$$STATUS" == "SUCCESS" ]]; then
            echo "‚úÖ $$TRIGGER succeeded. Waiting 90 seconds before continuing..."
            sleep 90
          elif [[ "$$STATUS" == "FAILURE" || "$$STATUS" == "CANCELLED" ]]; then
            echo "‚ö†Ô∏è $$TRIGGER failed/cancelled. Waiting 30 seconds before continuing..."
            sleep 30
          fi

          wait_for_no_running_builds
        done

  # Step 2: Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build', '-t',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest',
        '.'
      ]

  # Step 3: Docker Push
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest'
      ]

timeout: 1200s
options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _TRIGGER_NAME: "$TRIGGER_NAME"
