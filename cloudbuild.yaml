steps:
  # Step 1: Compare current trigger start time with watched triggers and wait if necessary
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        echo "‚è≥ Checking current trigger against watched triggers..."

        # üëá List of triggers to wait for
        WATCHED_TRIGGERS=("trigger-1" "trigger-3")

        # Current trigger (fallback if substitution missing)
        CURRENT_TRIGGER="${_TRIGGER_NAME:-trigger-1}"
        echo "‚ÑπÔ∏è Current Trigger: $CURRENT_TRIGGER"

        # Fetch current build ID and start time
        CURRENT_BUILD_INFO=$(gcloud builds list --region=asia-south1 \
          --filter="substitutions.TRIGGER_NAME=$CURRENT_TRIGGER" \
          --sort-by="~createTime" --limit=1 \
          --format="value(id,createTime)")

        CURRENT_BUILD_ID=$(echo "$CURRENT_BUILD_INFO" | awk '{print $1}')
        CURRENT_START_TIME=$(echo "$CURRENT_BUILD_INFO" | awk '{print $2}')

        if [[ -z "$CURRENT_BUILD_ID" ]]; then
          echo "‚ö†Ô∏è Could not find current build ID. Will execute normal wait logic..."
          SKIP_WAIT="false"
        else
          echo "‚è∞ Current build $CURRENT_BUILD_ID started at: $CURRENT_START_TIME"
          SKIP_WAIT="true"
          for TRIGGER in "${WATCHED_TRIGGERS[@]}"; do
            if [[ "$TRIGGER" == "$CURRENT_TRIGGER" ]]; then
              continue
            fi

            LATEST_BUILD=$(gcloud builds list --region=asia-south1 \
              --filter="substitutions.TRIGGER_NAME=$TRIGGER" \
              --sort-by="~createTime" --limit=1 \
              --format="value(id,createTime,status)")

            if [[ -n "$LATEST_BUILD" ]]; then
              BUILD_ID=$(echo "$LATEST_BUILD" | awk '{print $1}')
              START_TIME=$(echo "$LATEST_BUILD" | awk '{print $2}')
              STATUS=$(echo "$LATEST_BUILD" | awk '{print $3}')
              echo "üîé $TRIGGER latest build $BUILD_ID started at $START_TIME ($STATUS)"

              # If any trigger started BEFORE current trigger ‚Üí must wait
              if [[ "$START_TIME" < "$CURRENT_START_TIME" && ( "$STATUS" == "WORKING" || "$STATUS" == "QUEUED" ) ]]; then
                echo "‚è≥ $TRIGGER started earlier than current build ‚Üí waiting required."
                SKIP_WAIT="false"
              fi
            fi
          done
        fi

        if [[ "$SKIP_WAIT" == "true" ]]; then
          echo "‚úÖ Current trigger started earliest ‚Üí skipping wait logic."
          exit 0
        fi

        echo "‚ö†Ô∏è Current trigger not earliest ‚Üí executing wait logic."

        # --------- WAIT LOGIC START ----------
        TRIGGER_PATTERN="$(IFS=\|; echo "${WATCHED_TRIGGERS[*]}")"

        wait_for_no_running_builds() {
          while true; do
            echo "üîç Checking ongoing builds..."
            ALL_BUILDS=$(gcloud builds list --ongoing --region=asia-south1 \
              --format="value(id,createTime,status,substitutions.TRIGGER_NAME)")
            RUNNING_BUILDS=$(echo "$ALL_BUILDS" | grep -iE "$TRIGGER_PATTERN" | grep -v "$CURRENT_TRIGGER" || true)

            if [[ -z "$RUNNING_BUILDS" ]]; then
              echo "‚úÖ No watched triggers running (excluding current). Proceeding..."
              break
            fi

            echo "üîÑ Found running builds (excluding current):"
            echo "$RUNNING_BUILDS"
            echo "‚è± Waiting 20 seconds before re-checking..."
            sleep 20
          done
        }

        wait_for_no_running_builds

        for TRIGGER in "${WATCHED_TRIGGERS[@]}"; do
          if [[ "$TRIGGER" == "$CURRENT_TRIGGER" ]]; then
            continue
          fi

          LATEST_BUILD=$(gcloud builds list --region=asia-south1 \
            --filter="substitutions.TRIGGER_NAME=$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,status,createTime)")

          if [[ -z "$LATEST_BUILD" ]]; then
            echo "‚ÑπÔ∏è No previous build found for $TRIGGER. Skipping wait."
            continue
          fi

          BUILD_ID=$(echo "$LATEST_BUILD" | awk '{print $1}')
          STATUS=$(echo "$LATEST_BUILD" | awk '{print $2}')
          BUILDTIME=$(echo "$LATEST_BUILD" | awk '{print $3}')

          echo "‚û°Ô∏è Latest build for $TRIGGER: $BUILD_ID ($STATUS at $BUILDTIME)"

          # Wait until the trigger completes
          if [[ "$STATUS" == "WORKING" || "$STATUS" == "QUEUED" ]]; then
            while true; do
              CURRENT_STATUS=$(gcloud builds describe $BUILD_ID --region=asia-south1 --format="value(status)")
              echo "üîÑ $TRIGGER build $BUILD_ID status: $CURRENT_STATUS"
              if [[ "$CURRENT_STATUS" == "SUCCESS" || "$CURRENT_STATUS" == "FAILURE" || "$CURRENT_STATUS" == "CANCELLED" ]]; then
                STATUS=$CURRENT_STATUS
                break
              fi
              echo "‚è± Sleeping 15 seconds before checking again..."
              sleep 15
            done
          fi

          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "‚úÖ $TRIGGER succeeded. Waiting 90 seconds before continuing..."
            sleep 90
          elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
            echo "‚ö†Ô∏è $TRIGGER failed/cancelled. Waiting 30 seconds before continuing..."
            sleep 30
          fi

          wait_for_no_running_builds
        done

  # Step 2: Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build', '-t',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest',
        '.'
      ]

  # Step 3: Docker Push
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest'
      ]

timeout: 1200s
options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _TRIGGER_NAME: "trigger-1"
