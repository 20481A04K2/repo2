steps:
  # ==========================================
  # Step 1: Wait logic for running triggers
  # ==========================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        echo "‚è≥ Checking current trigger against actively running triggers..."

        WATCHED_TRIGGERS=("trigger-1" "trigger-3")
        CURRENT_TRIGGER="$${_TRIGGER_NAME:-trigger-2}"
        echo "‚ÑπÔ∏è Current Trigger: $$CURRENT_TRIGGER"

        CURRENT_BUILD_INFO=$$(gcloud builds list --region=asia-east1 \
          --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$$CURRENT_TRIGGER" \
          --sort-by="~createTime" --limit=1 \
          --format="value(id,createTime)")

        if [[ -z "$$CURRENT_BUILD_INFO" ]]; then
          echo "‚ö†Ô∏è No ongoing build found for $$CURRENT_TRIGGER (maybe already finished)."
          exit 0
        fi

        CURRENT_BUILD_ID=$$(echo "$$CURRENT_BUILD_INFO" | awk '{print $$1}')
        CURRENT_START_TIME=$$(echo "$$CURRENT_BUILD_INFO" | awk '{print $$2}')
        echo "‚è∞ Current build $$CURRENT_BUILD_ID started at: $$CURRENT_START_TIME"

        SKIP_WAIT="true"
        for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
          if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
            continue
          fi
          LATEST_BUILD=$$(gcloud builds list --region=asia-east1 \
            --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,createTime)")
          if [[ -n "$$LATEST_BUILD" ]]; then
            OTHER_START=$$(echo "$$LATEST_BUILD" | awk '{print $$2}')
            if [[ "$$OTHER_START" < "$$CURRENT_START_TIME" ]]; then
              SKIP_WAIT="false"
              echo "‚è≥ $$TRIGGER is still running and started earlier at $$OTHER_START"
              break
            fi
          fi
        done

        if [[ "$$SKIP_WAIT" == "true" ]]; then
          echo "‚úÖ No earlier running triggers found ‚Üí skipping wait logic."
          exit 0
        fi

        echo "‚ö†Ô∏è Found earlier running trigger(s) ‚Üí waiting for them to finish..."

        wait_for_build() {
          local TRIGGER_NAME=$$1
          local BUILD_ID=$$2
          while true; do
            STATUS=$$(gcloud builds describe $$BUILD_ID --region=asia-east1 --format="value(status)")
            if [[ "$$STATUS" == "SUCCESS" || "$$STATUS" == "FAILURE" || "$$STATUS" == "CANCELLED" ]]; then
              echo "üîπ $$TRIGGER_NAME build $$BUILD_ID finished with $$STATUS"
              break
            fi
            echo "‚è± $$TRIGGER_NAME build $$BUILD_ID still running, waiting 15s..."
            sleep 15
          done
          if [[ "$$STATUS" == "SUCCESS" ]]; then
            echo "‚úÖ $$TRIGGER_NAME succeeded. Waiting 90 seconds..."
            sleep 90
          else
            echo "‚ö†Ô∏è $$TRIGGER_NAME failed/cancelled. Waiting 30 seconds..."
            sleep 30
          fi
        }

        for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
          if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
            continue
          fi
          BUILD_INFO=$$(gcloud builds list --region=asia-east1 \
            --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,createTime)")
          if [[ -z "$$BUILD_INFO" ]]; then
            echo "‚ÑπÔ∏è No running build found for $$TRIGGER, skipping."
            continue
          fi
          BUILD_ID=$$(echo "$$BUILD_INFO" | awk '{print $$1}')
          BUILD_START=$$(echo "$$BUILD_INFO" | awk '{print $$2}')

          if [[ "$$BUILD_START" < "$$CURRENT_START_TIME" ]]; then
            wait_for_build "$$TRIGGER" "$$BUILD_ID"
          fi
        done

  # ==========================================
  # Step 2: Generate version tag
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: generate-version
    entrypoint: bash
    args:
      - -c
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # ==========================================
  # Step 3: Clone GitHub repo & unzip
  # ==========================================
  - name: gcr.io/cloud-builders/git
    id: clone-repo
    args:
      - clone
      - https://github.com/${_GITHUB_REPO}.git
      - /workspace/app

  # ==========================================
  # Step 4: Write startup script to run Flask app
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: write-startup-script
    entrypoint: bash
    args:
      - -c
      - |
        echo "[SCRIPT] Writing startup script..."
        cat << 'EOF' > startup-script.sh
        #!/bin/bash
        set -e
        echo "Installing Python and dependencies..."
        sudo apt-get update -y
        sudo apt-get install -y python3 python3-pip unzip curl
        mkdir -p /home/ubuntu/flask-app
        cd /home/ubuntu/flask-app
        git clone https://github.com/20481A04K2/repo1.git .
        python3 -m venv venv
        source venv/bin/activate
        sleep 2
        echo "Installing Flask..."
        pip install --upgrade pip
        pip install flask
        echo "Starting Flask app..."
        nohup python app.py > flask.log 2>&1 &
        # Check if Flask app started successfully
        sleep 5
        if pgrep -f "app.py" > /dev/null; then
          STATUS="success"
          echo "[STARTUP] Flask app started successfully."
        else
          STATUS="failure"
          echo "[STARTUP] Flask app failed to start."
        fi
        # Trigger Cloud Function with status
        CLOUD_FUNCTION_URL="https://function-613125347481.asia-south1.run.app"
        curl -s -X POST "$$CLOUD_FUNCTION_URL" \
        -H "Content-Type: application/json" \
        -d "{\"status\":\"$$STATUS\", \"vm\":\"$$(hostname)\", \"pipeline\":\"my-pipeline\"}"
        # Exit with proper code for Cloud Build
        if [[ "$$STATUS" == "failure" ]]; then
          exit 1
        fi
        EOF
  # ==========================================
  # Step 4.5: Wait for previously running triggers before image creation
  # ==========================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: wait-before-image
    entrypoint: bash
    args:
      - -c
      - |
        echo "‚è≥ Checking for earlier running triggers before image creation..."
        WATCHED_TRIGGERS=("trigger-1" "trigger-3")
        CURRENT_TRIGGER="$${_TRIGGER_NAME:-trigger-2}"

        for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
          if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
            continue
          fi

          BUILD_INFO=$$(gcloud builds list --region=asia-east1 \
            --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,createTime)")

          if [[ -n "$$BUILD_INFO" ]]; then
            BUILD_ID=$$(echo "$$BUILD_INFO" | awk '{print $$1}')
            BUILD_START=$$(echo "$$BUILD_INFO" | awk '{print $$2}')
            echo "‚è≥ Waiting for $$TRIGGER build $$BUILD_ID started at $$BUILD_START..."

            while true; do
              STATUS=$$(gcloud builds describe $$BUILD_ID --region=asia-east1 --format="value(status)")
              if [[ "$$STATUS" == "SUCCESS" || "$$STATUS" == "FAILURE" || "$$STATUS" == "CANCELLED" ]]; then
                echo "üîπ $$TRIGGER build $$BUILD_ID finished with status $$STATUS"
                break
              fi
              sleep 15
            done

            if [[ "$$STATUS" != "SUCCESS" ]]; then
              echo "‚ö†Ô∏è $$TRIGGER failed/cancelled, aborting image creation."
              exit 1
            fi
          fi
        done

        echo "‚úÖ No earlier running triggers ‚Äî safe to create image."
  # ==========================================
  # Step 5: Create image from MIG VM
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: create-image
    entrypoint: bash
    args:
      - -c
      - |
        source /workspace/version.env
        echo "[MIG] Fetching MIG instance boot disk..."
        VM_NAME=$(gcloud compute instance-groups managed list-instances ${_MIG_NAME} --zone ${_ZONE} --format="value(instance.basename())" | head -n 1)
        BOOT_DISK=$(gcloud compute instances describe $$VM_NAME --zone=${_ZONE} --format="value(disks[0].source.basename())")

        echo "[IMAGE] Creating image from boot disk $$BOOT_DISK"
        gcloud compute images create backend-image-$$VERSION_TAG \
          --source-disk=$$BOOT_DISK \
          --source-disk-zone=${_ZONE} \
          --family=backend-family \
          --project=crested-polygon-472204-n5 \
          --force

  # ==========================================
  # Step 6: Create instance template
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: create-template
    entrypoint: bash
    args:
      - -c
      - |
        source /workspace/version.env
        echo "[GCE] Creating instance template..."
        gcloud compute instance-templates create backend-template-$$VERSION_TAG \
          --project=crested-polygon-472204-n5 \
          --machine-type=n2-standard-2 \
          --image=backend-image-$$VERSION_TAG \
          --image-project=crested-polygon-472204-n5 \
          --service-account=613125347481-compute@developer.gserviceaccount.com \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --metadata-from-file=startup-script=startup-script.sh \
          --network=default \
          --subnet=default \
          --tags=http-server,https-server,lb-health-check \
          --region=asia-east1

  # ==========================================
  # Step 7: Rolling update MIG + delete old VMs
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: update-mig
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        source /workspace/version.env

        # Explicitly set MIG name and zone
        MIG_NAME="${_MIG_NAME}"
        ZONE="${_ZONE}"
        LATEST_TEMPLATE="backend-template-$${VERSION_TAG}"
        echo "$$MIG"
        echo "[MIG] Performing rolling update with template: $$LATEST_TEMPLATE"
        gcloud compute instance-groups managed rolling-action start-update \
          "$$MIG_NAME" \
          --zone="$$ZONE" \
          --version="template=$$LATEST_TEMPLATE" \
          --minimal-action=replace \
          --max-surge=1 \
          --max-unavailable=0

        echo "[WAIT] Waiting for at least one healthy VM from new template ($$LATEST_TEMPLATE)..."
        ATTEMPTS=0
        MAX_ATTEMPTS=30

        while true; do
          # Check if any VM from the new template is running and action is NONE (ready)
          READY_VM=$$(gcloud compute instance-groups managed list-instances "$$MIG_NAME" \
            --zone="$$ZONE" \
            --format="value(name,version.instanceTemplate.basename(),currentAction,healthState)" \
            | awk -v tmpl="$$LATEST_TEMPLATE" '$$2==tmpl && $$3=="NONE" {print $$1}' | head -n1)

          if [[ -n "$$READY_VM" ]]; then
            echo "[SUCCESS] Found healthy RUNNING VM from new template: $$READY_VM"
            break
          fi

          ATTEMPTS=$$((ATTEMPTS+1))
          if [[ $$ATTEMPTS -ge $$MAX_ATTEMPTS ]]; then
            echo "[WARNING] Timed out waiting for new VM from template $$LATEST_TEMPLATE. Proceeding to cleanup."
            break
          fi

          echo "[WAIT] Attempt $$ATTEMPTS/$$MAX_ATTEMPTS - No ready VM yet. Retrying in 10s..."
          sleep 10
        done

        echo "[CLEANUP] Deleting old instances (not using new template)..."
        OLD_INSTANCES=$$(gcloud compute instance-groups managed list-instances "$$MIG_NAME" \
          --zone="$$ZONE" \
          --format="value(name,version.instanceTemplate.basename())" \
          | awk -v tmpl="$$LATEST_TEMPLATE" '$$2!=tmpl {print $$1}')

        if [[ -z "$$OLD_INSTANCES" ]]; then
          echo "[CLEANUP] No old instances found ‚Äî nothing to delete."
        else
          echo "[CLEANUP] Deleting old instances: $$OLD_INSTANCES"
          for VM in $$OLD_INSTANCES; do
            echo "[DELETE] Deleting old instance: $$VM"
            gcloud compute instances delete "$$VM" --zone="$$ZONE" --quiet --delete-disks=all || true
          done
        fi

  # ==========================================
  # Step 8: Poll Cloud Function for VM startup status
  # ==========================================
  - name: gcr.io/cloud-builders/gcloud
    id: check-cloud-function
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Polling Cloud Function for VM startup status..."
        for i in {1..30}; do
          RESPONSE=$$(curl -s https://function-613125347481.asia-south1.run.app)
          STATUS=$$(echo $$RESPONSE | grep -oP '"status":"\K[^"]+')
          if [[ "$$STATUS" == "success" ]]; then
            echo "‚úÖ Deployment SUCCESS"
            exit 0
          elif [[ "$$STATUS" == "failure" ]]; then
            echo "‚ùå Deployment FAILURE"
            exit 1
          else
            echo "Waiting for VM to report status..."
            sleep 10
          fi
        done
        echo "‚ùå Timeout waiting for VM startup script result"
        exit 1

options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _TRIGGER_NAME: "trigger-2"
  _MIG_NAME: "vamsi-mig"
  _ZONE: "asia-east1-b"
  _GITHUB_REPO: "20481A04K2/repo2"
