steps:
  # Step 1: Trigger Coordination and Wait Logic
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        echo "‚è≥ Checking current trigger against watched triggers..."

        WATCHED_TRIGGERS=("trigger-1" "trigger-3")
        CURRENT_TRIGGER="$${_TRIGGER_NAME:-trigger-2}"
        echo "‚ÑπÔ∏è Current Trigger: $$CURRENT_TRIGGER"

        # Get current trigger build info
        CURRENT_BUILD_INFO=$$(gcloud builds list --region=asia-south1 \
          --filter="substitutions.TRIGGER_NAME=$$CURRENT_TRIGGER" \
          --sort-by="~createTime" --limit=1 \
          --format="value(id,createTime,status)")

        CURRENT_BUILD_ID=$$(echo "$$CURRENT_BUILD_INFO" | awk '{print $$1}')
        CURRENT_START_TIME=$$(echo "$$CURRENT_BUILD_INFO" | awk '{print $$2}')
        CURRENT_EPOCH=$$(date -d "$$CURRENT_START_TIME" +%s)

        if [[ -z "$$CURRENT_BUILD_ID" ]]; then
          echo "‚ö†Ô∏è Could not find current build ID. Will continue normal flow."
        fi

        # Check if any watched trigger started earlier and is still running
        SHOULD_WAIT=false
        for TRIGGER in "$${WATCHED_TRIGGERS[@]}"; do
          if [[ "$$TRIGGER" == "$$CURRENT_TRIGGER" ]]; then
            continue
          fi

          LATEST_BUILD=$$(gcloud builds list --region=asia-south1 \
            --filter="substitutions.TRIGGER_NAME=$$TRIGGER" \
            --sort-by="~createTime" --limit=1 \
            --format="value(id,createTime,status)")

          if [[ -z "$$LATEST_BUILD" ]]; then
            continue
          fi

          BUILD_ID=$$(echo "$$LATEST_BUILD" | awk '{print $$1}')
          START_TIME=$$(echo "$$LATEST_BUILD" | awk '{print $$2}')
          STATUS=$$(echo "$$LATEST_BUILD" | awk '{print $$3}')
          TRIGGER_EPOCH=$$(date -d "$$START_TIME" +%s)

          echo "üîé $$TRIGGER latest build $$BUILD_ID started at $$START_TIME ($$STATUS)"

          if [[ "$$TRIGGER_EPOCH" -lt "$$CURRENT_EPOCH" && ( "$$STATUS" == "WORKING" || "$$STATUS" == "QUEUED" ) ]]; then
            echo "‚è≥ $$TRIGGER started earlier than current build and is still running ‚Üí waiting required."
            SHOULD_WAIT=true
          fi
        done

        if [[ "$$SHOULD_WAIT" == false ]]; then
          echo "‚úÖ Current trigger started earliest ‚Üí skipping wait logic."
          exit 0
        fi

        echo "‚ö†Ô∏è Waiting for earlier triggers to complete..."

        # Function to wait until no watched triggers (excluding current) are running
        wait_for_no_running_builds() {
          while true; do
            ALL_BUILDS=$$(gcloud builds list --ongoing --region=asia-south1 \
              --format="value(id,createTime,status,substitutions.TRIGGER_NAME)")
            RUNNING_BUILDS=$$(echo "$$ALL_BUILDS" | grep -iE "$$(IFS=\|; echo "$${WATCHED_TRIGGERS[*]}")" | grep -v "$$CURRENT_TRIGGER" || true)

            if [[ -z "$$RUNNING_BUILDS" ]]; then
              echo "‚úÖ No earlier watched triggers running. Proceeding..."
              break
            fi

            echo "üîÑ Found running builds (excluding current):"
            echo "$$RUNNING_BUILDS"
            echo "‚è± Waiting 20 seconds..."
            sleep 20
          done
        }

        wait_for_no_running_builds

  # Step 2: Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build', '-t',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest',
        '.'
      ]

  # Step 3: Docker Push
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/divine-course-470809-f6/deploy-to-cloudrun/cloudrun-app:latest'
      ]

timeout: 1200s
options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _TRIGGER_NAME: "trigger-2"
